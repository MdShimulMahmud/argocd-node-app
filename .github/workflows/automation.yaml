name: Build CI with GitHub Actions

on:
  push:
    branches:
      - master
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "test/**"
      - "scripts/**"
      - "**/*.log"
  pull_request:
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      has_new_version: ${{ steps.check.outputs.has_new_version }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout infrastructure repo
        uses: actions/checkout@v3
        with:
          repository: "MdShimulMahmud/argocd-infra-repo"
          path: infra-repo
          token: ${{ secrets.GIT_TOKEN }}
          ref: master

      - name: Extract previous version from infra repo
        id: get_previous_version
        run: |
          # Extract the version tag from the current image line in argocd-deployment.yml
          previous_version=$(grep -oP 'argocd-node-app:\K(v[0-9]+)' infra-repo/argocd-app/argocd-deployment.yml)
          echo "Previous version: $previous_version"
          echo "previous_version=$previous_version" >> $GITHUB_ENV

      - name: Check current version
        id: check
        run: |
          # Read the current version from the VERSION file
          current_version=$(cat VERSION)
          echo "Current version: $current_version"

          # Set the outputs for current_version and has_new_version
          echo "::set-output name=current_version::$current_version"

          # Compare with previous version from the deployment file
          if [ "$current_version" != "$previous_version" ]; then
            echo "New version detected"
            echo "::set-output name=has_new_version::true"
          else
            echo "No new version, skipping build"
            echo "::set-output name=has_new_version::false"
          fi

  build:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ needs.check-version.outputs.has_new_version == 'true' }}

    env:
      current_version: ${{ needs.check-version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "23.0.0"

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      - name: Debug Current Version
        run: echo "Current Run Number = ${{ env.current_version }}"

  docker:
    runs-on: ubuntu-latest
    needs: [check-version, build]
    env:
      current_version: ${{ needs.check-version.outputs.current_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/argocd-node-app:${{ env.current_version }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    env:
      current_version: ${{ needs.check-version.outputs.current_version }}
    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v3
        with:
          repository: "MdShimulMahmud/argocd-infra-repo"
          token: ${{ secrets.GIT_TOKEN }}
          ref: master

      - name: Update deployment image tag
        run: |
          git config user.email "${{secrets.GIT_EMAIL}}"
          git config user.name "${{secrets.GIT_USERNAME}}"

          # Update the image tag using DOCKER_USERNAME
          sed -i "s|image: ${{ secrets.DOCKER_USERNAME }}/argocd-node-app:.*|image: ${{ secrets.DOCKER_USERNAME }}/argocd-node-app:${{env.current_version}}|g" argocd-app/argocd-deployment.yml

          # Show the changes for verification
          cat argocd-app/argocd-deployment.yml

          # Commit and push changes
          git add argocd-app/argocd-deployment.yml
          git commit -m "Update image tag to v${{ env.current_version }}"
          git push origin master
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
